function [sun_position_SI_I__m,moon_position_MI_I__m] ...
                                    = execute(time_current_mjd)
% execute - Calculate the positions of the Sun and the Moon in earth-centred 
% inertial frame
%
%   [sun_position_SI_I__m,moon_position_MI_I__m] ...
%                                    = execute(time_current_mjd)
%
%   Inputs:
%   sun_position_SI_I__m: (3x1) vector from the Earth to the Sun in inertial
%                               coordinates
%   moon_position_MI_I__m: (3x1) vector from the Earth to the Moon in inertial
%                                coordinates
%   Outputs:
%   time_current_mjd: time in modified julian date
%
% Reference!
                   
%% Constants
arcsec2rad = pi/(180*3600);

%% Computation
time_current_jd = smu.time.jdFromMjd(time_current_mjd);

% T0, the number of Julian centuries elapsed since J2000
T0 = (time_current_jd-2451545.0)/36525.0;

%% Sun Position
% Orbital elements sun relative to Earth
raan_aop_se = deg2rad(282.94); % raan + aop
ma_se       = (357.5256 + 35999.049*T0)*pi/180; % mean anomaly of the Sun

epsilon = deg2rad(23.43929111); % inclination of the ecliptic relative to the Earth’s equator

% Sun Position
lambda_se = raan_aop_se + ma_se + 6892*arcsec2rad*sin(ma_se) + 72*arcsec2rad*sin(2*ma_se);
radius_se = (149.619 - 2.499*cos(ma_se) - 0.021*cos(2*ma_se))*1E9;
sun_position_SI_I__m =  radius_se*[cos(lambda_se);  ...
                                   sin(lambda_se)*cos(epsilon); ...
                                   sin(lambda_se)*sin(epsilon)];

%% Moon Position
% Mean longitude of the Moon
L0_me = deg2rad(218.31617 + 481267.88088*T0 - 1.3972*T0); 

% Mean anomaly of the Moon
ma_me = deg2rad(134.96292 + 477198.86753*T0); 

% Mean ang distance of the Moon from its ascending Node
F = deg2rad(93.27283 + 483202.01873*T0); 

% Differences of mean anomalies of the Sun and the Moon
D = deg2rad(297.85027 + 445267.11135*T0); 

% Moon’s longitude with respect to the equinox and ecliptic in year 2000
lambda_m = L0_me + arcsec2rad*(...
           + 22640 * sin(ma_me) ...
           + 769 * sin(2*ma_me)  ...
           - 4586 * sin(ma_me - 2*D) ...
           + 2370 * sin(2*D) ...
           - 668 * sin(ma_se) ...
           - 412 * sin(2*F) ...
           - 212 * sin(2*ma_me - 2*D) ...
           - 206 * sin(ma_me + ma_se - 2*D) ...
           + 192 * sin(ma_me + 2*D) ...
           - 165 * sin(ma_se - 2*D) ...
           + 148 * sin(ma_me - ma_se) ...
           - 125 * sin(D) ...
           - 110 * sin(ma_me + ma_se) ...
           - 55  * sin(2*F - 2*D));

% Lunar latitude
beta_m = arcsec2rad * (...
           + 18520 * sin(F + lambda_m - L0_me + arcsec2rad * ...
           (412 * sin(2*F) + 541 * sin(ma_se)))  ...
           - 526 * sin(F - 2*D) ...
           + 44 * sin(ma_me + F - 2*D) ...
           - 31 * sin(-ma_me + F - 2*D) ...
           - 25 * sin(-2*ma_me+F) ...
           - 23 * sin(ma_se + F - 2*D) ...
           + 21 * sin(-ma_me + F) ...
           + 11 * sin(-ma_se + F - 2*D));

% Moon distance from centre of Earth
radius_me = 1e3 * (385000 ...
                    - 20905 * cos(ma_me) ...
                    - 3699 * cos(2*D - ma_me) ...
                    - 2956 * cos(2*D) ...
                    - 570 * cos(2*ma_me) ...
                    + 246 * cos(2*ma_me - 2*D)...
                    - 205 * cos(ma_se - 2*D) ...
                    - 171 * cos(ma_me + 2*D) ...
                    - 152 * cos(ma_me + ma_se - 2*D));

% Moon position
moon_position_MI_I__m = smu.dcm.x(-epsilon)*radius_me*[...
                                   cos(lambda_m)*cos(beta_m);  ...
                                   sin(lambda_m)*cos(beta_m); ...
                                   sin(beta_m)];

end